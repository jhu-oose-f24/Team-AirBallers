generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_TEST_URL")
}

model User {
  // Provided by next-auth
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Added for designer-app
  collections   Collection[]
}

model Account {
  // Provided by next-auth
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Collection {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  garments  Garment[]
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editable  Boolean   @default(false)
  // Relation to User
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
}

model Garment {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  type         GarmentType
  name         String
  specs        String
  prompts      GarmentPrompt[]
  images       GarmentImage[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  // Relation to Collection
  collection   Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String          @db.ObjectId
}

type GarmentPrompt {
  text      String
  createdAt DateTime @default(now())
}

type GarmentImage {
  url       String
  createdAt DateTime @default(now())
}

enum GarmentType {
  Shirt
  Pants
}

model Session {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
