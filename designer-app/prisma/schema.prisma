generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_TEST_URL")
}

// model User {
//   id                String              @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt         DateTime            @db.Date
//   password          String
//   updatedAt         DateTime            @db.Date
//   username          String              @unique
//   prompts           Prompt[]            // One user can have multiple prompts
//   garmentCollections GarmentCollection[] // One user can have multiple garment collections
// }

// model Prompt {
//   id               String               @id @default(auto()) @map("_id") @db.ObjectId
//   originalPrompt   String               // The original input from the user
//   generatedPrompt  String               // The AI-enhanced prompt based on the user's input
//   imageURL         String               // URL of the image generated by Flux AI
//   user             User                 @relation(fields: [userId], references: [id])
//   userId           String               @db.ObjectId
//   createdAt        DateTime             @default(now()) @db.Date
//   updatedAt        DateTime             @updatedAt @db.Date
//   garmentSpec      PromptGarmentSpec?    @relation(fields: [garmentSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   garmentSpecId    String?               @db.ObjectId @unique
//   garmentImage     PromptGarmentImage?   @relation(fields: [garmentImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   garmentImageId   String?               @db.ObjectId @unique
// }

// model PromptGarmentSpec {
//   id               String    @id @default(auto()) @map("_id") @db.ObjectId
//   description      String    // Description/specifications of the garment
//   createdAt        DateTime  @default(now()) @db.Date
//   updatedAt        DateTime  @updatedAt @db.Date
//   // Removed the back relation to avoid cycles

//   Prompt Prompt[]
// }

// model PromptGarmentImage {
//   id                String    @id @default(auto()) @map("_id") @db.ObjectId
//   imageURL          String    // URL for the garment image
//   createdAt         DateTime  @default(now()) @db.Date
//   updatedAt         DateTime  @updatedAt @db.Date
//   // Removed the back relation to avoid cycles

//   Prompt Prompt[]
// }

// model GarmentCollection {
//   id                String              @id @default(auto()) @map("_id") @db.ObjectId
//   garments          AbstractGarment[]   // Garments that belong to this collection
//   user              User                @relation(fields: [userId], references: [id])
//   userId            String              @db.ObjectId // Removed @unique to allow multiple collections
//   createdAt         DateTime            @default(now()) @db.Date
//   updatedAt         DateTime            @updatedAt @db.Date
// }

// model AbstractGarment {
//   id                String                @id @default(auto()) @map("_id") @db.ObjectId
//   garmentSpec       AbstractGarmentSpec? @relation(fields: [garmentSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   garmentSpecId     String?               @db.ObjectId @unique
//   garmentImage      AbstractGarmentImage? @relation(fields: [garmentImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   garmentImageId    String?               @db.ObjectId @unique
//   garmentCollection GarmentCollection     @relation(fields: [garmentCollectionId], references: [id])
//   garmentCollectionId String              @db.ObjectId
//   createdAt         DateTime              @default(now()) @db.Date
//   updatedAt         DateTime              @updatedAt @db.Date
//   type              String                // The type of garment (e.g., "Shirt" or "Pant")
// }

// model AbstractGarmentSpec {
//   id                String                @id @default(auto()) @map("_id") @db.ObjectId
//   description       String                // Description/specifications of the garment
//   createdAt         DateTime              @default(now()) @db.Date
//   updatedAt         DateTime              @updatedAt @db.Date

//   AbstractGarment AbstractGarment[]
// }

// model AbstractGarmentImage {
//   id                String                @id @default(auto()) @map("_id") @db.ObjectId
//   imageURL          String                // URL for the garment image
//   createdAt         DateTime              @default(now()) @db.Date
//   updatedAt         DateTime              @updatedAt @db.Date

//   AbstractGarment AbstractGarment[]
// }

// model Description {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   description String
//   edits       Json
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model User {
  // Provided by google-auth-library
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // Added for designer-app
  collections   Collection[]
}

model Account {
  // Provided by google-auth-library
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Collection {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  garments  Garment[]
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editable  Boolean   @default(false)
  // Relation to User
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
}

model Garment {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  type         GarmentType
  name         String
  specs        String
  prompts      GarmentPrompt[]
  images       GarmentImage[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  // Relation to Collection
  collection   Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String          @db.ObjectId
}

type GarmentPrompt {
  text      String
  createdAt DateTime @default(now())
}

type GarmentImage {
  url       String
  createdAt DateTime @default(now())
}

enum GarmentType {
  Shirt
  Pants
}
