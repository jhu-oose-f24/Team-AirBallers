generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @db.Date
  password          String
  updatedAt         DateTime           @db.Date
  username          String             @unique
  prompts           Prompt[]           // One user can have multiple prompts
  garmentCollection GarmentCollection? // One-to-one relation with GarmentCollection
}

model Prompt {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  originalPrompt   String               // The original input from the user
  generatedPrompt  String               // The AI-enhanced prompt based on the user's input
  imageURL         String               // URL of the image generated by Flux AI
  user             User                 @relation(fields: [userId], references: [id])
  userId           String               @db.ObjectId
  createdAt        DateTime             @default(now()) @db.Date
  updatedAt        DateTime             @updatedAt @db.Date
  garmentSpec      PromptGarmentSpec?    @relation(fields: [garmentSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  garmentSpecId    String?               @db.ObjectId @unique
  garmentImage     PromptGarmentImage?   @relation(fields: [garmentImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  garmentImageId   String?               @db.ObjectId @unique
}

model PromptGarmentSpec {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  description      String    // Description/specifications of the garment
  createdAt        DateTime  @default(now()) @db.Date
  updatedAt        DateTime  @updatedAt @db.Date
  // Removed the back relation to avoid cycles

  Prompt Prompt[]
}

model PromptGarmentImage {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  imageURL          String    // URL for the garment image
  createdAt         DateTime  @default(now()) @db.Date
  updatedAt         DateTime  @updatedAt @db.Date
  // Removed the back relation to avoid cycles

  Prompt Prompt[]
}

model GarmentCollection {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  garments          AbstractGarment[] // Garments that belong to this collection
  user              User             @relation(fields: [userId], references: [id])
  userId            String           @db.ObjectId @unique
  createdAt         DateTime         @default(now()) @db.Date
  updatedAt         DateTime         @updatedAt @db.Date
}

model AbstractGarment {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  garmentSpec       AbstractGarmentSpec? @relation(fields: [garmentSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  garmentSpecId     String?               @db.ObjectId @unique
  garmentImage      AbstractGarmentImage? @relation(fields: [garmentImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  garmentImageId    String?               @db.ObjectId @unique
  garmentCollection GarmentCollection     @relation(fields: [garmentCollectionId], references: [id])
  garmentCollectionId String              @db.ObjectId
  createdAt         DateTime              @default(now()) @db.Date
  updatedAt         DateTime              @updatedAt @db.Date
  type              String                // The type of garment (e.g., "Shirt" or "Pant")
}

model AbstractGarmentSpec {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  description       String                // Description/specifications of the garment
  createdAt         DateTime              @default(now()) @db.Date
  updatedAt         DateTime              @updatedAt @db.Date

  AbstractGarment AbstractGarment[]
}

model AbstractGarmentImage {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  imageURL          String                // URL for the garment image
  createdAt         DateTime              @default(now()) @db.Date
  updatedAt         DateTime              @updatedAt @db.Date

  AbstractGarment AbstractGarment[]
}
