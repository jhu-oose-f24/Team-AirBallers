generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @db.Date
  password          String
  updatedAt         DateTime           @db.Date
  username          String             @unique
  prompts           Prompt[]           // One user can have multiple prompts
  garmentCollection GarmentCollection? // Relation to garment collection
}

model Prompt {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  originalPrompt   String          // The original input from the user
  generatedPrompt  String          // The AI-enhanced prompt based on the user's input
  imageURL         String          // URL of the image generated by Flux AI
  user             User            @relation(fields: [userId], references: [id])
  userId           String          @db.ObjectId
  createdAt        DateTime        @default(now()) @db.Date
  updatedAt        DateTime        @updatedAt @db.Date
  garmentSpecs     GarmentSpec?    @relation(fields: [garmentSpecId], references: [id])
  garmentSpecId    String?         @db.ObjectId
  garmentImage     GarmentImage?   @relation(fields: [garmentImageId], references: [id])
  garmentImageId    String?         @db.ObjectId
}

model GarmentCollection {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  garments   AbstractGarment[]// Garments that belong to this collection
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @db.ObjectId
  createdAt  DateTime         @default(now()) @db.Date
  updatedAt  DateTime         @updatedAt @db.Date
}

model GarmentSpec {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  description   String       // Description/specifications of the garment
  prompt        Prompt?      @relation(fields: [promptId], references: [id])
  promptId      String?      @db.ObjectId
  abstractGarment AbstractGarment? @relation(fields: [abstractGarmentId], references: [id])
  abstractGarmentId String?   @db.ObjectId
  createdAt     DateTime     @default(now()) @db.Date
  updatedAt     DateTime     @updatedAt @db.Date
}

model GarmentImage {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  imageURL      String        // URL for the garment image
  prompt        Prompt?       @relation(fields: [promptId], references: [id])
  promptId      String?        @db.ObjectId
  abstractGarment AbstractGarment? @relation(fields: [abstractGarmentId], references: [id])
  abstractGarmentId String?    @db.ObjectId
  createdAt     DateTime      @default(now()) @db.Date
  updatedAt     DateTime      @updatedAt @db.Date
}

model AbstractGarment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  garmSpecs     GarmentSpec?    @relation(fields: [garmentSpecId], references: [id])
  garmentSpecId String?          @db.ObjectId
  garmImage     GarmentImage?   @relation(fields: [garmentImageId], references: [id])
  garmentImageId String?         @db.ObjectId
  garmentCollection GarmentCollection @relation(fields: [garmentCollectionId], references: [id])
  garmentCollectionId String      @db.ObjectId
  createdAt     DateTime        @default(now()) @db.Date
  updatedAt     DateTime        @updatedAt @db.Date
  type          String          // The type of garment (e.g., "Shirt" or "Pant")
}
